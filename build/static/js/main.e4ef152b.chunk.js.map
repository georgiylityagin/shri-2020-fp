{"version":3,"sources":["components/ValidationPlayground/styles.module.css","components/Task/index.jsx","helpers/processSequence.js","tools/api.js","components/ChainPlayground/index.jsx","constants.js","components/ValidationPlayground/InputWithValidation/index.jsx","helpers/validators.js","components/ValidationPlayground/index.jsx","components/Layout/index.jsx","serviceWorker.js","index.js","components/ValidationPlayground/InputWithValidation/styles.module.css","components/ChainPlayground/styles.module.css","components/Task/styles.module.css","components/Layout/styles.module.css"],"names":["module","exports","Task","title","description","children","className","styles","root","api","params","numbersBaseController","from","to","number","result","parseInt","toString","animalController","id","get","curry","url","errorCountdown","ebableErrors","Promise","reject","resolve","setTimeout","urlInstance","URL","host","pathname","paramsFromUrl","Object","fromEntries","URLSearchParams","search","query","whiteListHost","some","allowedHost","animalId","Number","slice","isNaN","this","processSequence","obj","a","string","prop","writeLog","handleSuccess","handleError","round","Math","pow","getResultProp","sqr","partial","mathMod3","mathMod","__","notEmpty","pipe","isNil","not","sideWriteLog","juxt","identity","last","checkMaxlength","gt","checkMinLength","lt","isNegative","isTooLong","length","isTooShort","isNotNumber","isError","anyPass","validationLogic","constructRequestParams","applySpec","x","apiDecimalToBinary","roundValue","apiGetAnimal","asyncPipe","pipeWith","fn","res","then","catch","error","processLogic","cond","getLogClassName","status","cn","logStatusSuccess","logStatusError","log","getCurrentTime","Date","toLocaleTimeString","Log","text","time","logTime","ChainPlayground","props","handleTextChange","target","setState","textFieldValue","value","logs","state","push","handleRunButtonClick","clearLog","initSection","TextField","label","onChange","initButton","Button","onClick","variant","color","size","map","i","key","React","Component","SHAPES","COLORS","getShapesClassName","isFieldValid","shapes","shapesUntouched","undefined","shapesValid","shapesInvalid","getShapeClassName","shapeColor","shapeColorWite","shapeColorRed","shapeColorOrange","shapeColorGreen","shapeColorBlue","shape","InputWithValidation","validateFn","useState","setIsFieldValid","circle","square","triangle","star","colors","updateColors","loaded","useRef","useEffect","current","values","every","el","processClick","event","currentColor","pickNextColor","unsetColor","onDoubleClick","onAuxClick","cx","cy","r","stroke","strokeWidth","y","width","height","rx","ry","d","points","require","propEq","allPass","equals","compose","filter","partialRight","converge","none","uniq","lte","gte","validateFieldN1","starIsRed","squareIsGreed","triangleIsWhite","circleIsWhite","validate","validateFieldN2","isGreen","filterGreen","allColors","greaterThanTwo","validateFieldN3","isRed","filterRed","isBlue","filterBlue","numOfRed","numOfBlue","validateFieldN4","circleIsBlue","squareIsOrange","validateFieldN5","isWhite","filterNotWhite","lte2","gte3","checkThreeEquals","checkEqualsNotWhite","validateFieldN6","triangleIsGreen","gte2","gte1","checkTwoGreen","checkOneRed","validateFieldN7","isOrange","filterNotOrange","eq0","validateFieldN8","isStarNotRed","isStarNotWhite","validateFieldN9","filterNotGreen","validateFieldN10","figures","eq1","figuresAreNotWhite","figuresAreEqual","checkConditions","ValidationPlayground","Layout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4ef152b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__2Rokj\"};","import React from 'react';\r\n\r\nimport styles from './styles.module.css';\r\n\r\n\r\nconst Task = ({title, description, children}) => {\r\n    return (\r\n        <div className={styles.root}>\r\n            <h2 className={styles.title}>\r\n                {title}\r\n            </h2>\r\n\r\n            <p>{description}</p>\r\n\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Task;\r\n","/**\r\n * @file Домашка по FP ч. 2\r\n * \r\n * Подсказки:\r\n * Метод get у инстанса Api – каррированый\r\n * GET / https://animals.tech/{id}\r\n * \r\n * GET / https://api.tech/numbers/base\r\n * params:\r\n * – number [Int] – число\r\n * – from [Int] – из какой системы счисления\r\n * – to [Int] – в какую систему счисления\r\n * \r\n * Иногда промисы от API будут приходить в состояние rejected, (прямо как и API в реальной жизни)\r\n * Ответ будет приходить в поле {result}\r\n */\r\nimport Api from '../tools/api';\r\nimport {\r\n  prop,\r\n  anyPass,\r\n  lt,\r\n  __,\r\n  gt,\r\n  length,\r\n  applySpec,\r\n  mathMod,\r\n  partial,\r\n  pipe,\r\n  last,\r\n  juxt,\r\n  identity,\r\n  pipeWith,\r\n  not,\r\n  cond,\r\n  isNil} from 'ramda';\r\n\r\nconst api = new Api();\r\n\r\n\r\nconst processSequence = async (obj) => {\r\n  const string = prop('value');\r\n  const writeLog = prop('writeLog', obj);\r\n  const handleSuccess = prop('handleSuccess', obj);\r\n  const handleError = prop('handleError', obj);\r\n  const isNaN = prop('isNaN', Number);\r\n  const round = prop('round', Math);\r\n  const pow = prop('pow', Math);\r\n  const get = prop('get', api);\r\n  const getResultProp = prop('result');\r\n\r\n  const sqr = partial(pow, [2]);\r\n  const mathMod3 = mathMod(__, 3);\r\n  const notEmpty = pipe(isNil, not);\r\n  const sideWriteLog = pipe(juxt([writeLog, identity]), last);\r\n  const checkMaxlength = gt(__, 9);\r\n  const checkMinLength = lt(__, 3);\r\n  const isNegative = lt(__, 0);\r\n  const isTooLong = pipe(length, checkMaxlength);\r\n  const isTooShort = pipe(length, checkMinLength);\r\n  const isNotNumber = pipe(Number, isNaN);\r\n  const isError = anyPass([isNegative, isTooLong, isTooShort, isNotNumber]);\r\n  const validationLogic = pipe(string, sideWriteLog, isError);\r\n\r\n  const constructRequestParams = applySpec({\r\n    from: () => 10,\r\n    to: () => 2,\r\n    number: (x) => x\r\n  });\r\n  const apiDecimalToBinary = get('https://api.tech/numbers/base', __);\r\n  const roundValue = pipe(Number, round);\r\n  const apiGetAnimal = async (id) => await get(`https://animals.tech/${id}`, '');\r\n\r\n  const asyncPipe = pipeWith(\r\n    (fn, res) => (res && res.then) \r\n    ? res.then(fn).catch((error) => {handleError(error)})\r\n    : fn(res)\r\n  );\r\n\r\n  const processLogic = asyncPipe([\r\n    string,\r\n    roundValue,\r\n    sideWriteLog,\r\n    constructRequestParams,\r\n    apiDecimalToBinary,\r\n    cond([\r\n      [notEmpty, asyncPipe([\r\n        getResultProp,\r\n        sideWriteLog,\r\n        length,\r\n        sideWriteLog,\r\n        sqr,\r\n        sideWriteLog,\r\n        mathMod3,\r\n        sideWriteLog,\r\n        apiGetAnimal,\r\n        cond([\r\n          [notEmpty, asyncPipe([\r\n            getResultProp,\r\n            handleSuccess\r\n          ])]\r\n        ])\r\n      ])]\r\n    ])\r\n  ]);\r\n\r\n  const inputNotValid = validationLogic(obj);\r\n\r\n  if (inputNotValid) {\r\n    handleError('ValidationError');\r\n    return;\r\n  };\r\n\r\n  processLogic(obj);\r\n}\r\n\r\nexport default processSequence;\r\n","import {curry} from 'ramda';\r\n\r\n\r\nexport default class Api {\r\n    constructor(params = {}) {\r\n        const {errorCountdown = 7, ebableErrors = true}= params;\r\n\r\n        this.whiteListHost = ['api.tech', 'animals.tech'];\r\n        this.errorCountdown = errorCountdown;\r\n        this.ebableErrors = ebableErrors;\r\n    }\r\n\r\n    numbersBaseController = ({from, to, number}) => {\r\n        return {result: parseInt(number, from).toString(to)}; \r\n    }\r\n\r\n    animalController = (id) => {\r\n        const animals = ['cat', 'dog', 'bird', 'fish']\r\n        \r\n        return {result: animals[id] || 'zebra'}; \r\n    }\r\n\r\n    get = curry((url, params) => {\r\n        this.errorCountdown = this.errorCountdown - 1;\r\n\r\n        if (this.ebableErrors && this.errorCountdown === 0) {\r\n            this.errorCountdown = 7;\r\n\r\n            return Promise.reject('Network error');\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                const urlInstance = new URL(url);\r\n                const host = urlInstance.host;\r\n                const pathname = urlInstance.pathname;\r\n        \r\n                const paramsFromUrl = Object.fromEntries(new URLSearchParams(urlInstance.search));\r\n        \r\n                const query = {\r\n                    ...paramsFromUrl,\r\n                    ...params,\r\n                };\r\n        \r\n                if (!this.whiteListHost.some(allowedHost => allowedHost === host)) {\r\n                    reject('Доступны только хосты \"api.tech\" и \"animals.tech\"');\r\n                 }\r\n        \r\n                switch(host) {\r\n                    case 'api.tech':\r\n                        if (pathname === '/numbers/base') {\r\n                                const {from, to, number} = params;\r\n\r\n                                if (!from || !to || !number) {\r\n                                    reject('Не указаны все необходимые параметры from, to, number');\r\n                                }\r\n\r\n                                resolve(this.numbersBaseController(query));\r\n                        } else {\r\n                            reject('Неправильный путь в origin api.tech, убедись что /numbers/base прописан верно');\r\n                        }\r\n\r\n                        break;\r\n                    case 'animals.tech':\r\n                        const animalId = Number(pathname.slice(1))\r\n                        \r\n                        if (Number.isNaN(animalId)) {\r\n                            reject('Не получается распарсить id животного');\r\n                        }\r\n\r\n                        resolve(this.animalController(animalId));\r\n                        break;\r\n                    default:\r\n                }\r\n\r\n                reject('Something went wrong');\r\n            }, 2000);\r\n        });\r\n    });\r\n}\r\n","import React from 'react';\r\nimport cn from 'classnames';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport styles from './styles.module.css';\r\nimport processSequence from '../../helpers/processSequence';\r\n\r\nconst getLogClassName = status => cn({\r\n    [styles.logStatusSuccess]: status === 'success',\r\n    [styles.logStatusError]: status === 'error',\r\n}, styles.log);\r\n\r\nconst getCurrentTime = () => new Date().toLocaleTimeString('ru-Ru');\r\n\r\nconst Log = ({text, status, time}) => {\r\n    return (\r\n        <div>\r\n            <span className={styles.logTime}>{time}</span>\r\n\r\n            <span className={getLogClassName(status)}>{text}</span>\r\n        </div>\r\n    );\r\n} \r\n\r\nclass ChainPlayground extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            textFieldValue: '',\r\n            logs: [],\r\n        }\r\n    }\r\n\r\n    handleTextChange = ({target}) => {\r\n        this.setState({textFieldValue: target.value})\r\n    }\r\n\r\n    writeLog = (value) => {\r\n        const {logs} = this.state;\r\n        logs.push({text: value, time: getCurrentTime()});\r\n\r\n        this.setState({logs});\r\n    }\r\n\r\n    handleSuccess = (value) => {\r\n        const {logs} = this.state;\r\n        logs.push({text: value, status: 'success', time: getCurrentTime()});\r\n\r\n        this.setState({logs});\r\n    }\r\n\r\n    handleError = (value) => {\r\n        const {logs} = this.state;\r\n        logs.push({text: value, status: 'error', time: getCurrentTime()});\r\n\r\n        this.setState({logs});\r\n    }\r\n    \r\n    \r\n    handleRunButtonClick = () => {\r\n        processSequence({\r\n            value: this.state.textFieldValue,\r\n            writeLog: this.writeLog,\r\n            handleSuccess: this.handleSuccess,\r\n            handleError: this.handleError,\r\n        });\r\n    }\r\n\r\n    clearLog = () => {\r\n        this.setState({logs: []});\r\n    }\r\n\r\n    render() {\r\n        const {logs, textFieldValue} = this.state;\r\n         return (\r\n            <div>\r\n                <ol className={styles.description}>\r\n                    <li>Берем строку N. Пишем изначальную строку в <i>writeLog</i>.</li>\r\n                    <li>Строка валидируется по следующим правилам: \r\n                        <ul>\r\n                            <li>кол-во символов в числе должно быть меньше 10.</li>\r\n                            <li>кол-во символов в числе должно быть больше 2.</li>\r\n                            <li>число должно быть положительным</li>\r\n                            <li>символы в строке только [0-9], т.е. <b>это валидное число</b> в 10-ной системе счисления</li>\r\n                        </ul>\r\n                        В случае ошибки валидации вызвать <i>handleError</i> с 'ValidationError' строкой в качестве аргумента\r\n                    </li>\r\n                    <li>Привести строку к числу, округлить к ближайшему целому с точностью до единицы, <i>записать в writeLog</i>.</li>\r\n                    <li>C помощью API /numbers/base перевести из 10-й системы счисления в двоичную, результат <i>записать в writeLog</i></li>\r\n                    <li>Взять кол-во символов в полученном от API числе <i>записать в writeLog</i></li>\r\n                    <li>Возвести в квадрат с помощью Javascript <i>записать в writeLog</i></li>\r\n                    <li>Взять остаток от деления на 3, <i>записать в writeLog</i></li>\r\n                    <li>C помощью API /animals.tech/id/name получить случайное животное используя полученный остаток в качестве id</li>\r\n                    <li>Завершить цепочку вызовом <i>handleSuccess</i> в который в качестве аргумента положить результат полученный на предыдущем шаге</li>\r\n                </ol>\r\n\r\n                <pre>\r\n                    {`____________________________________\r\nПеревод из одной системы счисления в другую:\r\n\r\nGET / https://api.tech/numbers/base\r\nparams:\r\n– number [Int] – число\r\n– from [Int] – из какой системы счисления\r\n– to [Int] – в какую систему счисления`}\r\n                </pre>\r\n\r\n                <pre>\r\n                    {`____________________________________\r\nПолучить животное по ID\r\n\r\nGET / https://animals.tech/{id}`}\r\n                </pre>\r\n        \r\n                <div className={styles.initSection}>\r\n                    <TextField \r\n                        id=\"standard-basic\"\r\n                        label=\"Число N\"\r\n                        onChange={this.handleTextChange}\r\n                        value={textFieldValue}\r\n                    />\r\n        \r\n                    <div className={styles.initButton}>\r\n                        <Button\r\n                            onClick={this.handleRunButtonClick}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                        >\r\n                            ➤\r\n                        </Button>\r\n                    </div>\r\n        \r\n                    <div className={styles.initButton}>\r\n                        <Button\r\n                            onClick={this.clearLog}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                        >\r\n                            ✕\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n    \r\n                {logs.map(({text, status, time}, i) => (\r\n                    <Log key={i} text={text} time={time} status={status} />\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChainPlayground;\r\n","export const SHAPES = {\r\n    TRIANGLE: 'triangle',\r\n    SQUARE: 'square',\r\n    CIRCLE: 'circle',\r\n    STAR: 'star',\r\n}\r\n\r\nexport const COLORS = {\r\n    RED: 'red',\r\n    BLUE: 'blue',\r\n    ORANGE: 'orange',\r\n    GREEN: 'green',\r\n    WHITE: 'white',\r\n}\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport cn from 'classnames';\r\n\r\nimport {SHAPES, COLORS} from '../../../constants';\r\nimport styles from './styles.module.css';\r\n\r\nconst getShapesClassName = isFieldValid => cn(styles.shapes, {\r\n    [styles.shapesUntouched]: isFieldValid === undefined,\r\n    [styles.shapesValid]: isFieldValid === true,\r\n    [styles.shapesInvalid]: isFieldValid === false,\r\n});\r\n\r\nconst getShapeClassName = shapeColor => cn({\r\n    [styles.shapeColorWite]: shapeColor === COLORS.WHITE,\r\n    [styles.shapeColorRed]: shapeColor === COLORS.RED,\r\n    [styles.shapeColorOrange]: shapeColor === COLORS.ORANGE,\r\n    [styles.shapeColorGreen]: shapeColor === COLORS.GREEN,\r\n    [styles.shapeColorBlue]: shapeColor === COLORS.BLUE,\r\n}, styles.shape);\r\n\r\nconst pickNextColor = color => {\r\n    switch(color) {\r\n        case COLORS.WHITE: return COLORS.RED;\r\n        case COLORS.RED: return COLORS.ORANGE;\r\n        case COLORS.ORANGE: return COLORS.GREEN;\r\n        case COLORS.GREEN: return COLORS.BLUE;\r\n        case COLORS.BLUE: return COLORS.RED;\r\n        default: return COLORS.WHITE;\r\n    }\r\n}\r\n\r\nconst InputWithValidation = ({validateFn, label}) => {\r\n    const [isFieldValid, setIsFieldValid] = useState(undefined);\r\n\r\n    const [\r\n        colors,\r\n        updateColors,\r\n    ] = useState({circle: COLORS.WHITE, square: COLORS.WHITE, triangle: COLORS.WHITE, star: COLORS.WHITE});\r\n\r\n    const {\r\n        circle,\r\n        square,\r\n        triangle,\r\n        star,\r\n    } = colors;\r\n\r\n    const loaded = useRef(false);\r\n\r\n    useEffect(() => {\r\n        if (loaded.current) {\r\n            if (Object.values(colors).every(el => el === COLORS.WHITE)) {\r\n                setIsFieldValid(undefined);\r\n            } else {\r\n                if (validateFn(colors)) {\r\n                    if (!isFieldValid) {\r\n                        setIsFieldValid(true)\r\n                    }\r\n                } else {\r\n                    setIsFieldValid(false);\r\n                }\r\n            }\r\n        } else {\r\n            loaded.current = true;\r\n        }\r\n    }, [colors, isFieldValid, validateFn]);\r\n\r\n    const processClick = shape => event => {\r\n        const currentColor = colors[shape];\r\n\r\n        updateColors({\r\n            ...colors,\r\n            [shape]: pickNextColor(currentColor),\r\n        });\r\n    }\r\n    \r\n    const unsetColor = shape => event => {\r\n        updateColors({\r\n            ...colors,\r\n            [shape]: COLORS.WHITE,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <div>{label}</div>\r\n\r\n            <div className={getShapesClassName(isFieldValid)}>\r\n                <svg>\r\n                    <circle\r\n                        className={getShapeClassName(circle)}\r\n                        onClick={processClick(SHAPES.CIRCLE)}\r\n                        onDoubleClick={unsetColor(SHAPES.CIRCLE)}\r\n                        onAuxClick={unsetColor(SHAPES.CIRCLE)}\r\n                        cx=\"21\"\r\n                        cy=\"24\"\r\n                        r=\"20\"\r\n                        stroke=\"dimgray\" \r\n                        strokeWidth=\"2\"\r\n                    />\r\n\r\n                    <rect \r\n                        className={getShapeClassName(square)}\r\n                        onClick={processClick(SHAPES.SQUARE)}\r\n                        onDoubleClick={unsetColor(SHAPES.SQUARE)}\r\n                        onAuxClick={unsetColor(SHAPES.SQUARE)}\r\n                        x=\"50\" \r\n                        y=\"5\" \r\n                        width=\"39\" \r\n                        height=\"39\" \r\n                        rx=\"5\" \r\n                        ry=\"5\" \r\n                        strokeWidth=\"2\"\r\n                    />\r\n\r\n                    <path \r\n                        className={getShapeClassName(triangle)}\r\n                        onClick={processClick(SHAPES.TRIANGLE)}\r\n                        onDoubleClick={unsetColor(SHAPES.TRIANGLE)}\r\n                        onAuxClick={unsetColor(SHAPES.TRIANGLE)}\r\n                        d=\"M118 3 L138 43 L98 43 Z\" \r\n                        stroke=\"dimgray\" \r\n                        strokeWidth=\"2\"\r\n                    />\r\n\r\n                    <polygon \r\n                        className={getShapeClassName(star)}\r\n                        onClick={processClick(SHAPES.STAR)}\r\n                        onDoubleClick={unsetColor(SHAPES.STAR)}\r\n                        onAuxClick={unsetColor(SHAPES.STAR)}\r\n                        points=\"165 0 170 20 185 20 175 30 180 45 165 35 150 45 155 30 145 20 160 20\"\r\n                        stroke=\"dimgray\" \r\n                        strokeWidth=\"2\"\r\n                    />\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default InputWithValidation;\r\n","/**\r\n * @file Домашка по FP ч. 1\r\n * \r\n * Основная задача — написать самому, или найти в FP библиотеках функции anyPass/allPass\r\n * Эти функции/их аналоги есть и в ramda и в lodash\r\n *\r\n * allPass — принимает массив функций-предикатов, и возвращает функцию-предикат, которая\r\n * вернет true для заданного списка аргументов, если каждый из предоставленных предикатов\r\n * удовлетворяет этим аргументам (возвращает true)\r\n *\r\n * anyPass — то же самое, только удовлетворять значению может единственная функция-предикат из массива.\r\n *\r\n * Если какие либо функции написаны руками (без использования библиотек) это не является ошибкой\r\n */\r\n\r\nconst { \r\n  propEq,\r\n  allPass,\r\n  props,\r\n  equals,\r\n  compose,\r\n  filter,\r\n  length,\r\n  partial,\r\n  partialRight,\r\n  gt,\r\n  values,\r\n  converge,\r\n  reject,\r\n  prop,\r\n  not,\r\n  __,\r\n  none,\r\n  uniq,\r\n  lte,\r\n  gte\r\n} = require('ramda');\r\n\r\n// 1. Красная звезда, зеленый квадрат, все остальные белые.\r\nexport const validateFieldN1 = (obj) => {\r\n  const starIsRed = propEq('star', 'red');\r\n  const squareIsGreed = propEq('square', 'green');\r\n  const triangleIsWhite = propEq('triangle', 'white');\r\n  const circleIsWhite = propEq('circle', 'white');\r\n\r\n  const validate = allPass([\r\n    starIsRed,\r\n    squareIsGreed,\r\n    triangleIsWhite,\r\n    circleIsWhite\r\n  ]);\r\n\r\n  return validate(obj);\r\n};\r\n\r\n// 2. Как минимум две фигуры зеленые.\r\nexport const validateFieldN2 = (obj) => {\r\n  const isGreen = equals('green');\r\n  const filterGreen = partial(filter, [isGreen]);\r\n  const allColors = props(['star', 'square', 'triangle', 'circle']);\r\n  const greaterThanTwo = partialRight(gt, [1]);\r\n\r\n  const validate = compose(\r\n    greaterThanTwo,\r\n    length,\r\n    filterGreen,\r\n    allColors\r\n  );\r\n\r\n  return validate(obj);\r\n};\r\n\r\n// 3. Количество красных фигур равно кол-ву синих.\r\nexport const validateFieldN3 = (obj) => {\r\n  const isRed = equals('red');\r\n  const filterRed = filter(isRed, __);\r\n  const isBlue = equals('blue');\r\n  const filterBlue = filter(isBlue, __);\r\n\r\n  const numOfRed = compose(\r\n    length,\r\n    filterRed,\r\n    values\r\n  );\r\n\r\n  const numOfBlue = compose(\r\n    length,\r\n    filterBlue,\r\n    values\r\n  )\r\n\r\n  const validate = converge(equals, [numOfRed, numOfBlue])\r\n\r\n  return validate(obj);\r\n};\r\n\r\n// 4. Синий круг, красная звезда, оранжевый квадрат\r\nexport const validateFieldN4 = (obj) => {\r\n  const circleIsBlue = propEq('circle', 'blue');\r\n  const starIsRed = propEq('star', 'red');\r\n  const squareIsOrange = propEq('square', 'orange');\r\n\r\n  const validate = allPass([\r\n    circleIsBlue,\r\n    starIsRed,\r\n    squareIsOrange\r\n  ]);\r\n\r\n  return validate(obj);\r\n};\r\n\r\n// 5. Три фигуры одного любого цвета кроме белого.\r\nexport const validateFieldN5 = (obj) => {\r\n  const isWhite = equals('white');\r\n  const filterNotWhite = reject(isWhite, __);\r\n  const lte2 = lte(__, 2);\r\n  const gte3 = gte(__, 3);\r\n\r\n  const checkThreeEquals = compose(\r\n    lte2,\r\n    length,\r\n    uniq,\r\n    values\r\n  );\r\n\r\n  const checkEqualsNotWhite = compose(\r\n    gte3,\r\n    length,\r\n    filterNotWhite,\r\n    values\r\n  );\r\n\r\n  const validate = allPass([checkThreeEquals, checkEqualsNotWhite]);\r\n\r\n  return validate(obj);\r\n};\r\n\r\n// 6. Две зеленые фигуры (одна из них треугольник), еще одна любая красная.\r\nexport const validateFieldN6 = (obj) => {\r\n  const triangleIsGreen = propEq('triangle', 'green');\r\n  const isGreen = equals('green');\r\n  const isRed = equals('red');\r\n  const filterGreen = filter(isGreen, __);\r\n  const filterRed = filter(isRed, __);\r\n  const gte2 = gte(__, 2);\r\n  const gte1 = gte(__, 1);\r\n\r\n  const checkTwoGreen = compose(\r\n    gte2,\r\n    length,\r\n    filterGreen,\r\n    values,\r\n  );\r\n  \r\n  const checkOneRed = compose(\r\n    gte1,\r\n    length,\r\n    filterRed,\r\n    values\r\n  );\r\n\r\n  const validate = allPass([triangleIsGreen, checkTwoGreen, checkOneRed]);\r\n\r\n  return validate(obj);\r\n};\r\n\r\n// 7. Все фигуры оранжевые.\r\nexport const validateFieldN7 = (obj) => {\r\n  const isOrange = equals('orange');\r\n  const filterNotOrange = reject(isOrange, __);\r\n  const eq0 = equals(__, 0);\r\n\r\n  const validate = compose(\r\n    eq0,\r\n    length,\r\n    filterNotOrange,\r\n    values\r\n  );\r\n  \r\n  return validate(obj);\r\n};\r\n\r\n// 8. Не красная и не белая звезда.\r\nexport const validateFieldN8 = (obj) => {\r\n  const star = prop('star');\r\n  const isRed = equals('red');\r\n  const isWhite = equals('white');\r\n\r\n  const isStarNotRed = compose(\r\n    not,\r\n    isRed,\r\n    star\r\n  );\r\n\r\n  const isStarNotWhite = compose(\r\n    not,\r\n    isWhite,\r\n    star\r\n  );\r\n\r\n  const validate = allPass([isStarNotRed, isStarNotWhite])\r\n\r\n  return validate(obj);\r\n};\r\n\r\n// 9. Все фигуры зеленые.\r\nexport const validateFieldN9 = (obj) => {\r\n  const isGreen = equals('green');\r\n  const filterNotGreen = reject(isGreen, __);\r\n  const eq0 = equals(__, 0);\r\n\r\n  const validate = compose(\r\n    eq0,\r\n    length,\r\n    filterNotGreen,\r\n    values\r\n  );\r\n  \r\n  return validate(obj);\r\n};\r\n\r\n// 10. Треугольник и квадрат одного цвета (не белого)\r\nexport const validateFieldN10 = (obj) => {\r\n  const figures = props(['triangle', 'square']);\r\n  const isWhite = equals('white');\r\n  const eq1 = equals(__, 1);\r\n  const figuresAreNotWhite = none(isWhite);\r\n  const figuresAreEqual = compose(\r\n    eq1,\r\n    length,\r\n    uniq,\r\n  );\r\n\r\n  const checkConditions = allPass([figuresAreNotWhite, figuresAreEqual]);\r\n\r\n  const validate = compose(\r\n    checkConditions,\r\n    figures\r\n  );\r\n\r\n  return validate(obj);\r\n};\r\n","import React from 'react';\r\nimport InputWithValidation from './InputWithValidation';\r\nimport {\r\n    validateFieldN1,\r\n    validateFieldN2,\r\n    validateFieldN3,\r\n    validateFieldN4,\r\n    validateFieldN5,\r\n    validateFieldN6,\r\n    validateFieldN7,\r\n    validateFieldN8,\r\n    validateFieldN9,\r\n    validateFieldN10,\r\n} from '../../helpers/validators';\r\n\r\n\r\nimport styles from './styles.module.css';\r\n\r\n\r\nconst ValidationPlayground = () => {\r\n    return (\r\n        <div className={styles.root}>\r\n            <InputWithValidation validateFn={validateFieldN1} label=\"1. Красная звезда, зеленый квадрат, все остальные белые\"/>\r\n\r\n            <InputWithValidation validateFn={validateFieldN2} label=\"2. Как минимум две фигуры зеленые\"/>\r\n\r\n            <InputWithValidation validateFn={validateFieldN3} label=\"3. Количество красных фигур равно кол-ву синих\"/>\r\n\r\n            <InputWithValidation validateFn={validateFieldN4} label=\"4. Синий круг, красная звезда, оранжевый квадрат\"/>\r\n\r\n            <InputWithValidation validateFn={validateFieldN5} label=\"5. Три фигуры одного любого цвета кроме белого\"/>\r\n\r\n            <InputWithValidation validateFn={validateFieldN6} label=\"6. Две зеленые фигуры (одна из них треугольник), еще одна любая красная\"/>\r\n\r\n            <InputWithValidation validateFn={validateFieldN7} label=\"7. Все фигуры оранжевые\"/>\r\n\r\n            <InputWithValidation validateFn={validateFieldN8} label=\"8. Не красная и не белая звезда\"/>\r\n\r\n            <InputWithValidation validateFn={validateFieldN9} label=\"9. Все фигуры зеленые\"/>\r\n\r\n            <InputWithValidation validateFn={validateFieldN10} label=\"10. Треугольник и квадрат одного цвета (не белого)\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ValidationPlayground;\r\n","import React from 'react';\r\n\r\nimport Task from '../Task';\r\nimport ChainPlayground from '../ChainPlayground'\r\nimport ValidationPlayground from '../ValidationPlayground'\r\nimport styles from './styles.module.css';\r\n\r\n\r\nconst Layout = () => {\r\n    return (\r\n        <div className={styles.root}>\r\n            <h1 className={styles.title}>\r\n                Домашняя работа по теме \"Функциональное программирование\" в рамках программы ШРИ 2020.\r\n            </h1>\r\n\r\n            <p>\r\n                Для решения используйте Ramda или любые другие библиотеки. Ramda, Lodash уже добавлены в package.json\r\n                Оставьте файловую структуру и интерфейс функций без изменений. Это поможет нам быстрее проверить работу.\r\n                Максимально используйте функциональное программирование!\r\n            </p>\r\n\r\n            <Task \r\n                title=\"Функции для проверки валидации различных комбинаций ключей\"\r\n                description=\"Добавьте в src/helpers/validators.js функции для корректной валидации ключей.\"\r\n            >\r\n                <ValidationPlayground />\r\n            </Task>\r\n\r\n            <Task \r\n                title=\"Цепочка из синхронных и асинхронных действий\"\r\n                description=\"Допишите файл src/helpers/processSequence.js. \r\n                    Необходимо написать последовательную цепочку для вычисления разных значений, которая состоит\r\n                    из синхронных и асинхронных действий.\r\n                    Напишите реализацию в FP стиле.\"\r\n            >\r\n                <ChainPlayground />\r\n            </Task>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Layout;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Layout from './components/Layout';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Layout />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__3sXRV\",\"shapes\":\"styles_shapes__1teYE\",\"shapesUntouched\":\"styles_shapesUntouched__ytO2s\",\"shapesValid\":\"styles_shapesValid__3g4pm\",\"shapesInvalid\":\"styles_shapesInvalid__2R8_O\",\"shape\":\"styles_shape__2snvY\",\"shapeColorWite\":\"styles_shapeColorWite__1-hX7\",\"shapeColorRed\":\"styles_shapeColorRed__3rhdw\",\"shapeColorOrange\":\"styles_shapeColorOrange__1D_8H\",\"shapeColorGreen\":\"styles_shapeColorGreen__396Qo\",\"shapeColorBlue\":\"styles_shapeColorBlue__1pfP-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"initSection\":\"styles_initSection__2nsvI\",\"initButton\":\"styles_initButton__2nvzA\",\"description\":\"styles_description__1eodK\",\"logStatusSuccess\":\"styles_logStatusSuccess__3QlLQ\",\"logStatusError\":\"styles_logStatusError__bgadn\",\"log\":\"styles_log__2Ibj3\",\"logTime\":\"styles_logTime__3Khbh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__3QF21\",\"title\":\"styles_title__Co_g5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"styles_root__KzRcG\",\"title\":\"styles_title__3TR66\",\"explanation\":\"styles_explanation__2Bwfg\",\"explanationItem\":\"styles_explanationItem__12yCe\",\"highlightedText\":\"styles_highlightedText__3FfIZ\"};"],"sourceRoot":""}